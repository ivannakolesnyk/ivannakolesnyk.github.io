{
	"info": {
		"_postman_id": "a296d0a8-51fd-4ca8-8e80-8f61f56363c4",
		"name": "Monoca",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22512887",
		"_collection_link": "https://appdevgroup01.postman.co/workspace/AppDev%253A-GROUP01~a69268d6-a819-4713-8090-9681427e8202/collection/22512887-a296d0a8-51fd-4ca8-8e80-8f61f56363c4?action=share&creator=22512887&source=collection_link"
	},
	"item": [
		{
			"name": "AuthenticationController",
			"item": [
				{
					"name": "Signup - valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Signup Successful\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testpostman@example.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"Test User\",\r\n    \"phone_number\": \"1234567890\",\r\n    \"postal_code\": \"12345\",\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"Test City\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup - invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Signup Failed\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testpostman@example.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"Test User\",\r\n    \"phone_number\": \"1234567890\",\r\n    \"postal_code\": \"12345\",\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"Test City\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Failed\", function () {",
									"  pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"wrongpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch user details by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetch User Details Successful\", function () {",
									"  pm.response.to.have.status(200); let jsonData = pm.response.json(); pm.expect(jsonData.email).to.eql(\"testpostman@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/testpostman@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testpostman@example.com"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CategoryController",
			"item": [
				{
					"name": "Non-admin can't create categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular users can't create categories\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Category created successfully\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new category with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input data\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Categories fetched successfully\", function () {",
									"  pm.response.to.have.status(200); let jsonData = pm.response.json(); pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-admin can't delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular users are not allowed to delete categories\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Category deleted successfully\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/New Category",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"New Category"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProductController",
			"item": [
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product created successfully\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Product\",\r\n    \"description\": \"A new product for testing\",\r\n    \"price\": 10,\r\n    \"qty_in_stock\": 100,\r\n    \"category\": {\r\n        \"name\": \"Coffee\"\r\n    },\r\n    \"product_image\": \"url\",\r\n    \"imageAlt\": \"alt\",\r\n    \"ingredients\": \"bla bla\",\r\n    \"sale\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input data\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"Invalid product for testing\",\r\n    \"price\": 10,\r\n    \"qty_in_stock\": 100,\r\n    \"category\": {\r\n        \"name\": \"Coffee\"\r\n    },\r\n    \"product_image\": \"url\",\r\n    \"imageAlt\": \"alt\",\r\n    \"ingredients\": \"bla bla\",\r\n    \"sale\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Products fetched successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"\r",
									"    let productId;\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        if (jsonData[i].name === \"New Product\") {\r",
									"            productId = jsonData[i].id;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.environment.set(\"newProductId\", productId);\r",
									"    pm.expect(productId).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product fetched successfully\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{newProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a product by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid product ID\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product updated successfully\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{newProductId}},\r\n    \"name\": \"New Product\",\r\n    \"description\": \"Just updating description for testing\",\r\n    \"price\": 10,\r\n    \"qty_in_stock\": 100,\r\n    \"category\": {\r\n        \"name\": \"Coffee\"\r\n    },\r\n    \"product_image\": \"url\",\r\n    \"imageAlt\": \"alt\",\r\n    \"ingredients\": \"bla bla\",\r\n    \"sale\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input data\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{newProductId}},\r\n    \"name\": \"\",\r\n    \"description\": \"Just updating description for testing\",\r\n    \"price\": 10,\r\n    \"qty_in_stock\": 100,\r\n    \"category\": {\r\n        \"name\": \"Coffee\"\r\n    },\r\n    \"product_image\": \"url\",\r\n    \"imageAlt\": \"alt\",\r\n    \"ingredients\": \"bla bla\",\r\n    \"sale\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product deleted successfully\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{newProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product not found\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ShopOrderController",
			"item": [
				{
					"name": "Get all orders - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admin can get all orders\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orders fetched successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"",
									"    let orderId = jsonData[0].id;",
									"",
									"",
									"    pm.environment.set(\"orderId\", orderId);",
									"    pm.expect(orderId).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user's orders\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/chuck@chuck.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"chuck@chuck.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders of user when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admins and the owner user can access the data\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/chuck@chuck.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"chuck@chuck.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update order status\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Shipped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update non-existing order's status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order not found\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Shipped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order lines by order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orderlines fetched\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/orderlines/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"orderlines",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order lines by invalid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to fetch due to invalid id\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://group01.web-tek.ninja/api/orders/orderlines/a",
							"protocol": "https",
							"host": [
								"group01",
								"web-tek",
								"ninja"
							],
							"path": [
								"api",
								"orders",
								"orderlines",
								"a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admin can delete orders\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://group01.web-tek.ninja/api/orders/{{orderId}}",
							"protocol": "https",
							"host": [
								"group01",
								"web-tek",
								"ninja"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestimonialController",
			"item": [
				{
					"name": "Get all testimonials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testimonials fetched\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/testimonials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new testimonial when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admins can create testimonials\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/testimonials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testimonial created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"",
									"    let testimonialId = jsonData.id;",
									"",
									"",
									"    pm.environment.set(\"testimonialId\", testimonialId);",
									"    pm.expect(testimonialId).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TEST\",\r\n    \"testimonial_image\": \"test.png\",\r\n    \"rating\": 4,\r\n    \"description\": \"Just test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/testimonials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete testimonial by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to delete due to invalid id\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/testimonials/invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials",
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testimonial updated successfully\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TESTing\",\r\n    \"description\": \"NO\",\r\n    \"rating\": 1,\r\n    \"testimonial_image\": \"no.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a testimonial when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admin can update testimonials\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete testimonial by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testimonial deleted successfully\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserController",
			"item": [
				{
					"name": "Get all users when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only admin can get all users\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Users fetched successfully\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User's profile fetched successfully\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/chuck@chuck.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"chuck@chuck.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invalid user's profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching invalid user\", function () {",
									" pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update someone else's profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only the owner of the account can modify its data\", function () {",
									"   pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testPostman@example.com\",\r\n    \"name\": \"Test User Postman\",\r\n    \"phone_number\": \"1234567890\",\r\n    \"postal_code\": \"12345\",\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"Test City\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/testPostam@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testPostam@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testpostman@example.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update my profile when I'm logged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile updated successfully\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testpostman@example.com\",\r\n    \"name\": \"Test User Postman\",\r\n    \"phone_number\": \"1234567890\",\r\n    \"postal_code\": \"12345\",\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"Test City\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/testpostman@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testpostman@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change user password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Password changed successfully\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"password\",\r\n    \"newPassword\": \"newPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/testpostman@example.com/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testpostman@example.com",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user when not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to delete user\", function () {",
									"  pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/testpostam@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testpostam@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication Successful\", function () {",
									"  pm.response.to.have.status(200); pm.environment.set(\"jwt\", pm.response.json().jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"chuck@chuck.com\",\r\n    \"password\": \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user when admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User Deleted Successful\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/testpostman@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"testpostman@example.com"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}